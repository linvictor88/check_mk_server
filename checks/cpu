#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Output is taken from /proc/loadavg plus the number of cores:
# 0.26 0.47 0.52 2/459 19531 4


cpuload_default_levels = (5, 10)
threads_default_levels = (2000, 4000)
cpu_default_levels =  None

def inventory_cpu(info):
    return [(None, "cpu_default_levels")]

def inventory_cpu_load(info):
    if len(info) == 1 and len(info[0]) >= 5:
        return [(None, "cpuload_default_levels")]

def check_cpu_load(item, params, info):
    load = []
    for i in [ 0, 1, 2 ]:
        load.append(float(info[0][i]))
    if len(info[0]) >= 6:
        num_cpus = int(info[0][5])
    else:
        num_cpus = 1

    warn, crit = params # apply on 15min average, relative to number of CPUs
    warn = warn * num_cpus
    crit = crit * num_cpus
    perfdata = [ ('load' + str(z), l, warn, crit, 0, num_cpus ) for (z,l) in [ (1,load[0]), (5,load[1]), (15, load[2]) ] ]

    if load[2] >= crit:
        return (2, "CRIT - 15min load %.2f at %s CPUs (critical at %.2f)" % (load[2], num_cpus, crit), perfdata)
    elif load[2] >= warn:
        return (1, "WARN - 15min load %.2f at %s CPUs (warning at %.2f)" % (load[2], num_cpus, warn), perfdata)
    else:
        return (0, "OK - 15min load %.2f at %s CPUs" % (load[2], num_cpus), perfdata)

def inventory_cpu_threads(info):
    if len(info) == 1 and len(info[0]) >= 5:
        return [(None, "", "threads_default_levels")]

def check_cpu(item, params, info):
    if not info:
        return (3, "UNKNOW - no output from plugin")
    global g_counters
    cpu = devices.Cpu(info)
    this_time = int(time.time())
    diff_values = {}
    n = 0
    for k, v in cpu.get_device_dict().items():
        countername = "cpu.util.%s" % k
        last_time, last_val = g_counters.get(countername, (0, 0))
        diff_values[k] = (v - last_val)
        g_counters[countername] = (this_time, v)
        #if debug_log:
        #    l = file(debug_log, "a")
        #    l.write("cpu %s: %s\n" % (k, v-last_val))

    sum_jiffies = diff_values['total'] # do not account for steal!
    if sum_jiffies == 0:
        return (0, "OK - too short interval")

    usage = 100 * float(sum_jiffies - diff_values['idle']) / float(sum_jiffies)

    cpu.update_device(user=diff_values['user'], nice=diff_values['nice'],
                      system=diff_values['system'], idle=diff_values['idle'],
                      iowait=diff_values['iowait'], irq=diff_values['irq'],
                      softirq=diff_values['softirq'], steal=diff_values['steal'],
                      total=sum_jiffies,
                      usage=usage)

    user        = diff_values['user'] + diff_values['nice'] # add user + nice
    system      = diff_values['system']
    wait        = diff_values['iowait']
    user_perc   = 100.0 * float(user)   / float(sum_jiffies)
    system_perc = 100.0 * float(system) / float(sum_jiffies)
    wait_perc   = 100.0 * float(wait)   / float(sum_jiffies)
    perfdata = [
          ( "user",   "%.3f" % user_perc ),
          ( "system", "%.3f" % system_perc ),
          ( "wait",   "%.3f" % wait_perc ) ]

    infotext = " - user: %2.1f%%, system: %2.1f%%, wait: %2.1f%%" % (user_perc, system_perc, wait_perc)

    # You may set a warning/critical level on the io wait
    # percentage. This can be done by setting params to
    # a pair of (warn, crit)
    result = 0
    try:
        warn, crit = params
        if wait_perc >= crit:
            result = 2
            infotext += "(!!)"
        elif wait_perc >= warn:
            result = 1
            infotext += "(!)"
    except:
        pass

    return ((result, nagios_state_names[result] + infotext, perfdata), cpu)

def inventory_cpu_threads(info):
    if len(info) == 1 and len(info[0]) >= 5:
        return [(None, "", "threads_default_levels")]

def check_cpu_threads(item, params, info):
    try:
        nthreads = int(info[0][3].split('/')[1])
    except:
        return (3, "UNKNOWN - invalid output from plugin")
    warn, crit = params
    perfdata = [('threads', nthreads, warn, crit, 0 )]
    if nthreads >= crit:
        return (2, "CRIT - %d threads (critical at %d)" % (nthreads, crit), perfdata)
    elif nthreads >= warn:
        return (1, "WARN - %d threads (warning at %d)" % (nthreads, warn), perfdata)
    else:
        return (0, "OK - %d threads" % (nthreads,), perfdata)

check_info["cpu.loads"] = {
    "check_function"        : check_cpu_load,
    "inventory_function"    : inventory_cpu_load,
    "service_description"   : "CPU load",
    "has_perfdata"          : True,
    "group"                 : "cpu_load",
}

check_info["cpu.threads"] = {
    "check_function"        : check_cpu_threads,
    "inventory_function"    : inventory_cpu_threads,
    "service_description"   : "Number of threads",
    "has_perfdata"          : True,
    "group"                 : "threads",
}

check_info["cpu"] = {
    "check_function"        : check_cpu,
    "inventory_function"    : inventory_cpu,
    "service_description"   : "CPU load",
    "has_perfdata"          : True,
    "group"                 : "cpu",
}
