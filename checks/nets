#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example output from agent:

# <<<lnx_if:sep(58)>>>
#    lo:   4520   54  0  0  0  0  0  0    4520  54    0   0   0   0   0   0
#  eth0:      0    0  0  0  0  0  0  0    1710   5    0   0   0   0   0   0
#  eth1:  78505  555  0  0  0  0  0  0  132569  523   0   0   0   0   0    0
# [lo]
#         Link detected: yes
# [eth0]
#         Speed: 65535Mb/s
#         Duplex: Unknown! (255)
#         Auto-negotiation: on
#         Link detected: no
# [eth1]
#         Speed: 1000Mb/s
#         Duplex: Full
#         Auto-negotiation: on
#         Link detected: yes

check_includes['lnx_if'] = [ "if.include" ]

linux_nic_check = "lnx_if"

def if_lnx_convert_to_if64(info):
    nic_info = {}
    current_nic = None
    index = 0
    for line in info:
        if line[0].startswith('['):
            current_nic = line[0][1:-1]
            index += 1
            nic_info[current_nic]['index'] = index
        elif current_nic == None: # still in perf-counters subsection
            nic = line[0]
            nic_info[nic] = { "counters": map(int, line[1].split()) }
        else:
            nic_info[current_nic][line[0].strip()] = line[1].strip()

    # if index is 0 we either have found no nics or no information
    # from ethtool is present. In the latter case we continue and
    # just monitor the performance. We set the state to 'unknown'
    # in that case.

    if_table = []
    index = 0
    for nic, attr in nic_info.items():
        counters = attr.get("counters", [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
        index += 1
        ifIndex = attr.get("index",index)
        ifDescr = nic
        ifAlias = nic

        # Guess type from name of interface
        if nic == "lo":
            ifType = 24
        else:
            ifType = 6

        # Compute speed
        speed_text = attr.get("Speed")
        if speed_text == None:
            ifSpeed = ''
        else:
            if speed_text == '65535Mb/s': # unknown
                ifSpeed = ''
            elif speed_text.endswith("Kb/s"):
                ifSpeed = int(speed_text[:-4]) * 1000
            elif speed_text.endswith("Mb/s"):
                ifSpeed = int(speed_text[:-4]) * 1000000
            elif speed_text.endswith("Gb/s"):
                ifSpeed = int(speed_text[:-4]) * 1000000000
            else:
                ifSpeed = ''

        # Performance counters
        ifInOctets = counters[0]
        inucast = counters[1] + counters[7]
        inmcast = counters[7]
        inbcast = 0
        ifInDiscards = counters[3]
        ifInErrors = counters[2]
        ifOutOctets = counters[8]
        outucast = counters[9]
        outmcast = 0
        outbcast = 0
        ifOutDiscards = counters[11]
        ifOutErrors = counters[10]
        ifOutQLen = counters[12]

        # Link state from ethtool. If ethtool has no information about
        # this NIC, we set the state to unknown.
        ld = attr.get("Link detected")
        if ld == "yes":
            ifOperStatus = 1
        elif ld == "no":
            ifOperStatus = 2
        else:
            # No information from ethtool. We consider interfaces up
            # if they have been used at least some time since the
            # system boot.
            if ifInOctets > 0:
                ifOperStatus = 1 # assume up
            else:
                ifOperStatus = 4 # unknown (NIC has never been used)

        # There is no mac adress data available for the moment
        ifPhysAddress = ''

        if_table.append(map(str, [
          ifIndex, ifDescr, ifType, ifSpeed, ifOperStatus,
          ifInOctets, inucast, inmcast, inbcast, ifInDiscards,
          ifInErrors, ifOutOctets, outucast, outmcast, outbcast,
          ifOutDiscards, ifOutErrors, ifOutQLen, ifAlias, ifPhysAddress ]))

    return if_table

def inventory_nets(info):
    return [(None, None)]

def check_nets(item, params, info):
    if not info:
        return (3, "UNKNOW - no output from plugin")
    this_time = int(time.time())
    nets = devices.Nets(info)
    perfdata = []
    status = 0
    infos = []
    nets_get = nets.get_device_dict()['nets']
    for net in nets_get:
        infos.append("%s:" % (net['name']))
        perfdata.append( ('name', net['name']) )
        for name, counter in [
            ( "inOctets", net['inOctets']),
            ( "outOctets",   net['outOctets']),
            ( "tput",   net['tput'])]:
            timedif, valdiff_per_sec = get_counter("nets.%s.%s" % (name, net['name']), this_time, counter)
            net[name] = valdiff_per_sec
            infos.append("%s/sec %s" % (get_bytes_human_readable(valdiff_per_sec), name))
            perfdata.append( (name, valdiff_per_sec) )

        for name, counter in [
            ( "pktRate", net['pktRate']),
            ( "intfErrs",    net['intfErrs']) ]:
            timedif, valdiff_per_sec = get_counter("nets.%s.%s" % (name, net['name']), this_time, counter)
            net[name] = valdiff_per_sec
            infos.append("%s/sec %s" % (valdiff_per_sec, name))
            perfdata.append( (name, valdiff_per_sec) )
        infos.append(";;;")

    nets.update_device(nets=nets_get)

    return ((status, nagios_state_names[status] + " - " + ", ".join(infos) , perfdata), nets)

def check_if_common_single(item, params, info, force_counter_wrap = False):
    # Params now must be a dict. Some keys might
    # be set to None
    targetspeed        = params.get("speed")
    targetstate        = params.get("state")
    average            = params.get("average")
    unit               = params.get("unit") in ["Bit", "bit"] and "Bit" or "B"
    unit_multiplier    = unit == "Bit" and 8.0 or 1.0

    # error checking might be turned off
    if params["errors"]:
        err_warn, err_crit = params["errors"]
    else:
        err_warn, err_crit = None, None

    # Traffic checking might be turned off
    if "traffic" in params:
        bw_warn, bw_crit = params["traffic"]
    else:
        bw_warn, bw_crit = None, None


    for ifIndex, ifDescr, ifType, ifSpeed, ifOperStatus, ifInOctets,  \
            inucast, inmcast, inbcast, ifInDiscards, ifInErrors, ifOutOctets, \
            outucast, outmcast, outbcast, ifOutDiscards, ifOutErrors, \
            ifOutQLen, ifAlias, ifPhysAddress in info:
        ifDescr = cleanup_if_strings(ifDescr)
        ifAlias = cleanup_if_strings(ifAlias)

        if item.lstrip("0") == ifIndex \
            or (item == "0" * len(item) and saveint(ifIndex) == 0) \
            or item == ifAlias \
            or item == ifDescr \
            or item == "%s %s" % (ifAlias, ifIndex) \
            or item == "%s %s" % (ifDescr, ifIndex):

            # Display port number or alias in infotext if that is not part
            # of the service description anyway
            if item.lstrip("0") == ifIndex \
                and (item == ifAlias or ifAlias == '') \
                and (item == ifDescr or ifDescr == ''): # description trivial
                infotext = ""
            elif item == "%s %s" % (ifAlias, ifIndex) and ifDescr != '': # non-unique Alias
                infotext = "[%s/%s]" % (ifAlias, ifDescr)
            elif item != ifAlias and ifAlias != '': # alias useful
                infotext = "[%s] " % ifAlias
            elif item != ifDescr and ifDescr != '': # description useful
                infotext = "[%s] " % ifDescr
            else:
                infotext = "[%s] " % ifIndex

            state = 0

            operstatus = if_statename(str(ifOperStatus))
            if targetstate and  \
                (ifOperStatus != targetstate
                and not (type(targetstate) in [ list, tuple ] and ifOperStatus in targetstate)):
                state = 2
                infotext += "(%s)(!!) " % operstatus
            else:
                infotext += "(%s) " % operstatus


            # prepare reference speed for computing relative bandwidth usage
            speed = saveint(ifSpeed)

            if speed:
                ref_speed = speed / 8.0
            elif targetspeed:
                ref_speed = targetspeed / 8.0
            else:
                ref_speed = None

	    if ifPhysAddress:
                mac = ":".join(["%02s" % hex(ord(m))[2:] for m in ifPhysAddress]).replace(' ', '0')
                infotext += 'MAC: %s, ' % mac

            # Check speed settings of interface, but only if speed information
            # is available. This is not always the case.
            if speed:
                infotext += get_nic_speed_human_readable(speed)
                if not targetspeed is None and speed != targetspeed:
                    infotext += " (wrong speed, expected: %s)(!)" % get_nic_speed_human_readable(targetspeed)
                    state = max(state, 1)
            elif targetspeed:
                infotext += "assuming %s" % get_nic_speed_human_readable(targetspeed)
            else:
                infotext += "speed unknown"

            # convert percentages to absolute values if levels are float
            # this is only possible if a reference speed is available.
            if ref_speed:
                if bw_warn != None and type(bw_warn) == float:
                    bw_warn = bw_warn / 100.0 * ref_speed * unit_multiplier
                if bw_crit != None and type(bw_crit) == float:
                    bw_crit = bw_crit / 100.0 * ref_speed * unit_multiplier

            # Ignore percentual levels if no reference speed is available
            else:
                if bw_warn != None and type(bw_warn) == float:
                    bw_warn = None

                if bw_crit != None and type(bw_crit) == float:
                    bw_crit = None

            # Even if the measurement unit is set to "bit" the WARN and CRIT levels are
            # still reported as bytes to stay compatible with older rrd data
            if unit == "Bit":
                if bw_crit and bw_crit != None:
                    bw_crit = bw_crit / 8
                if bw_warn and bw_warn != None:
                    bw_warn = bw_warn / 8

            # Performance counters
            this_time = time.time()
            rates = []
            wrapped = False
            perfdata = []
            for name, counter, warn, crit, mmin, mmax in [
                ( "in",        ifInOctets, bw_warn, bw_crit, 0, ref_speed),
                ( "inucast",   inucast, None, None, None, None),
                ( "innucast",  saveint(inmcast) + saveint(inbcast), None, None, None, None),
                ( "indisc",    ifInDiscards, None, None, None, None),
                ( "inerr",     ifInErrors, err_warn, err_crit, None, None),

                ( "out",       ifOutOctets, bw_warn, bw_crit, 0, ref_speed),
                ( "outucast",  outucast, None, None, None, None),
                ( "outnucast", saveint(outmcast) + saveint(outbcast), None, None, None, None),
                ( "outdisc",   ifOutDiscards, None, None, None, None),
                ( "outerr",    ifOutErrors, err_warn, err_crit, None, None) ]:

                try:
                    timedif, rate = get_counter("if.%s.%s" % (name, item), this_time, saveint(counter))
                    if force_counter_wrap:
                        raise MKCounterWrapped("if.%s.%s" % (name, item), "Forced counter wrap")
                    rates.append(rate)
                    perfdata.append( (name, rate, warn, crit, mmin, mmax) )
                except MKCounterWrapped:
                    wrapped = True
                    # continue, other counters might wrap as well

            # if at least one counter wrapped, we do not handle the counters at all
            if wrapped:
                # If there is a threshold on the bandwidth, we cannot proceed
                # further (the check would be flapping to green on a wrap)
                if bw_crit != None:
                    raise MKCounterWrapped("", "Counter wrap, skipping checks this time")
                perfdata = []
            else:
                perfdata.append(("outqlen", saveint(ifOutQLen),"","", unit == "Bit" and "0.0" or "0"))
                get_human_readable = lambda traffic: get_bytes_human_readable(traffic * unit_multiplier, 1024, True, unit)
                for what, errorrate, okrate, traffic in \
                   [ ("in",  rates[4], rates[1] + rates[2], rates[0]),
                     ("out", rates[9], rates[6] + rates[7], rates[5]) ]:

                    infotext += ", %s: %s/s" % (what, get_human_readable(traffic))

                    if ref_speed:
                        perc_used = 100.0 * traffic / ref_speed
                        infotext += "(%.1f%%)" % perc_used

                    # handle computation of average
                    if average:
                        timedif, traffic_avg = get_average("if.%s.%s.avg" % (what, item), this_time, traffic, average)
                        infotext += ", %dmin avg: %s/s" % (average, get_human_readable(traffic_avg))
                        perfdata.append( ("%s_avg_%d" % (what, average), traffic_avg, bw_warn, bw_crit, 0, ref_speed) )
                        traffic = traffic_avg # apply levels to average traffic

                    # Check bandwidth thresholds
                    if bw_crit != None and traffic >= bw_crit:
                        state = 2
                        infotext += ' (!!) >= ' + get_human_readable(bw_crit / unit_multiplier) + "/s"
                    elif bw_warn != None and traffic >= bw_warn:
                        state = max(state, 1)
                        infotext += ' (!) >= ' + get_human_readable(bw_warn / unit_multiplier) + "/s"

                    pacrate = okrate + errorrate
                    if pacrate > 0.0: # any packets transmitted?
                        errperc = 100.0 * errorrate / (okrate + errorrate)

                        if errperc > 0:
                            infotext += ", %s-errors: %.2f%%" % (what, errperc)

                        if   err_crit != None and errperc >= err_crit:
                            state = 2
                            infotext += "(!!) >= " + str(err_crit)
                        elif err_warn != None and errperc >= err_warn:
                            state = max(state, 1)
                            infotext += "(!) >= " + str(err_warn)

            return (state, "%s - %s" % (nagios_state_names[state], infotext), perfdata)

    return (3, "UNKNOWN - no such interface")

check_info['nets'] = (check_nets, "Nets", 1,  inventory_nets)
checkgroup_of['nets'] = "nets"
check_default_levels['nets'] = "if_default_levels"
